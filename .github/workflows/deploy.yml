name: DevOps Pipeline

on:
  push:
    branches:
      - master

jobs:
  terraform:
    name: Provision Infrastructure with Terraform (including EKS)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init -reconfigure
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Apply Terraform Plan
        run: |
          terraform apply -auto-approve
          PRIVATE_KEY=$(terraform output -raw private_key_pem || echo "")
          if [ -z "$PRIVATE_KEY" ]; then
            echo "Error: private_key_pem not found. Exiting."
            exit 1
          else
            echo "$PRIVATE_KEY" > id_rsa
            chmod 600 id_rsa
          fi
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Store SSH key as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key
          path: ./terraform/id_rsa
          if-no-files-found: error

      - name: Rollback (Destroy Resources) if Apply Fails
        if: failure()
        run: terraform destroy -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  ansible:
    name: Configure Servers with Ansible
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Download SSH key artifact
        uses: actions/download-artifact@v4
        with:
          name: ssh-private-key

      - name: Set permissions on the SSH private key
        run: |
          chmod 600 id_rsa
          mv id_rsa ~/.ssh/id_rsa

      - name: Run Ansible Playbook
        run: ansible-playbook -i ansible/inventory/hosts ansible/playbook.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'False'

  docker:
    name: Build and Push Docker Images to ECR
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Build Docker Images
        run: |
          docker build -t userservice ./docker/services/userservice
          docker build -t paymentservice ./docker/services/paymentservice

      - name: Tag Docker Images
        run: |
          docker tag userservice:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/userservice:latest
          docker tag paymentservice:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/paymentservice:latest

      - name: Push Docker Images to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/userservice:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/paymentservice:latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  kubernetes:
    name: Deploy to Kubernetes on EKS
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name eks-cluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Replace placeholders in Kubernetes manifest
        run: |
          sed -i 's/${AWS_ACCOUNT_ID}/'${{ secrets.AWS_ACCOUNT_ID }}'/g' k8s/deployments/userservice.yml
          sed -i 's/${AWS_REGION}/'${{ secrets.AWS_REGION }}'/g' k8s/deployments/userservice.yml

      - name: Set up Kubernetes Kubectl
        uses: azure/setup-kubectl@v1

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployments/userservice.yml
          kubectl apply -f k8s/deployments/paymentservice.yml
